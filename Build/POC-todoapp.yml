trigger: none

variables:
 - name: ProjectName
   value: ToDoList
 - name: ProjectSearchPath
   value: ToDoList
 - name: 'solutionName'
   value: ToDoList.sln,ToDoListUI.csproj
 - name: zipName
   value: todolist

pool: SamplePool

stages:
  - stage: azurescript
    jobs:
      - job:
        steps:
          - task: NuGetCommand@2
            displayName: Run nuget restore
            inputs:
              command: 'restore'
              restoreSolution: '$(ProjectSearchPath)/*.sln'
              # feedsToUse: 'select'
              # vstsFeed: '1b38962d-9be0-4287-a101-a6420bcafb67'

          - task: DotNetCoreCLI@2
            displayName: Publish - $(solutionName)
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '$(solutionName)'
              arguments: '--configuration Release /p:DebugType=None /p:DebugSymbols=false --output $(Build.SourcesDirectory)\Build\zip\$(zipName) -v d'
              modifyOutputPath: false
              zipAfterPublish: true
              workingDirectory: '$(Build.SourcesDirectory)\$(projectSearchPath)'

          # - task: AzureCLI@2
          #   inputs:
          #     azureSubscription: 'Visual Studio Professional Subscription(36e17b0a-f140-42b7-933a-03495cc621b2)'
          #     scriptType: 'ps'
          #     scriptLocation: 'inlineScript'
          #     inlineScript: |
          #       $appservicePlan = $(az appservice plan list --query "[?tags.env=='$(env)' && tags.owner=='$(owner)']" | ConvertFrom-Json)
          #       $fileName = "terraform.tfvars.json"
          #       $data = @{}
          #       $apps = @{}
          #       $app = @{}
          #       $app.Add("app_name","$(project)")
          #       $app.Add("version","$(version)")
          #       $apps.Add("app",$app)
          #       $data.Add("plan_name",$appservicePlan.name)
          #       $data.Add("plan_id",$appservicePlan.id)
          #       $data.Add("location",$appservicePlan.location)
          #       $data.Add("resource_group_name",$appservicePlan.resourceGroup)
          #       $data.Add("env","$(env)")
          #       $data.Add("apps",$apps)
          #       $data.Add("tags",$appservicePlan.tags)
          #       $data | ConvertTo-Json | set-content -Path $fileName
                
          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     PathtoPublish: 'terraform.tfvars.json'
          #     ArtifactName: 'drop'
          #     publishLocation: 'Container'
              
          # - task: DownloadFileshareArtifacts@1
          #   inputs:
          #     filesharePath: '$(Build.SourcesDirectory)'
          #     artifactName: 'terraform.tfvars.json'
          #     downloadPath: '$(System.ArtifactsDirectory)'


                # $appservicePlan = $(az appservice plan list --query "[?tags.env=='$(env)' && tags.owner=='$(owner)']" | ConvertFrom-Json)
                # write-output $appservicePlan
                # $fileName = "$(Build.SourcesDirectory)/POCJson/env/terraform.tfvars.json"
                # # $fileName = "terraform.tfvars.json"
                # $data = Get-Content -path $fileName -Raw | ConvertFrom-Json
                # $data.plan_id = $appservicePlan.id
                # $data.plan_name = $appservicePlan.name
                # $data.resource_group_name = $appservicePlan.resourceGroup
                # $data.location = $appservicePlan.location
                # $data.env = '$(env)'
                # $data.tags = $appservicePlan.tags
                # $data.apps.app.app_name = '$(project)'
                # $data.apps.app.version = '$(version)'
                # $data | ConvertTo-Json | set-content -Path $fileName

          # - task: PowerShell@2
          #   inputs:
          #     targetType: 'inline'
          #     script: 'get-content $(Build.SourcesDirectory)/POCJson/env/terraform.tfvars.json'
          
          # - task: PowerShell@2
          #   inputs:
          #     targetType: 'inline'
          #     script: 'get-content $(Build.SourcesDirectory)/terraform.tfvars.json'

          - task: TerraformCLI@0
            displayName: "terraform init"
            enabled: false
            inputs:
              command: "init"
              backendServiceArm: "Visual Studio Professional Subscription(36e17b0a-f140-42b7-933a-03495cc621b2)"
              allowTelemetryCollection: true
              workingDirectory: "$(Build.SourcesDirectory)/Infra"
         
          - task: TerraformCLI@0
            displayName: "terraform plan"
            enabled: false
            inputs:
              command: 'plan'
              workingDirectory: "$(Build.SourcesDirectory)/Infra"
              environmentServiceName: "Visual Studio Professional Subscription(36e17b0a-f140-42b7-933a-03495cc621b2)"
              commandOptions: '-out=tfplan'
              allowTelemetryCollection: true
            
          - task: TerraformCLI@0
            displayName: "terraform apply"
            enabled: false
            inputs:
              command: 'apply'
              workingDirectory: "$(Build.SourcesDirectory)/Infra"
              environmentServiceName: "Visual Studio Professional Subscription(36e17b0a-f140-42b7-933a-03495cc621b2)"
              commandOptions: 'tfplan'
              allowTelemetryCollection: true
            condition: and(succeeded(), eq(variables['TerraformApply'], 'True'))

# extends: 
#   template: ..\Templates\build.yml
#   parameters:
#     projectName: $(ProjectName)
#     solutionName: Sunrise.Fhir.$(ProjectName).sln
#     testProject: Sunrise.Fhir.$(ProjectName).Tests.sln
#     projectSearchPath: Source/$(ProjectName)
#     zipName: Fhir$(ProjectName)WebApi
#     projectVersionID: $(AllergyIntolerance)